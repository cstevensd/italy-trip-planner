import React, { useState, useMemo, useEffect, useRef } from 'react';
import { todoList as initialTodoList, travelerDetails } from '../data/tripData';
import { TodoItemType } from '../types';
import { Icon } from '../components/Icon';
import FlightCountdown from '../components/FlightCountdown';

const getAssigneeColor = (name: string) => {
    // Consistent colors for the main travelers
    const travelerColors: { [key: string]: string } = {
        'Audrey': 'bg-pink-200 text-pink-800',
        'Grace': 'bg-purple-200 text-purple-800',
        'Tessy': 'bg-cyan-200 text-cyan-800',
    };
    return travelerColors[name] || 'bg-gray-200 text-gray-800'; // Fallback color
};

const createEmailBody = (item: TodoItemType): string => {
    if (!item.dueDate) return '';

    const dueDate = new Date(item.dueDate).toLocaleString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });

    return `
    <div style="font-family: sans-serif; background-color: #FDFBF6; padding: 20px; border-radius: 12px; border: 1px solid #E0E0E0; max-width: 600px; margin: auto;">
      <h1 style="color: #003366; font-size: 24px; border-bottom: 2px solid #E2725B; padding-bottom: 10px; margin-bottom: 20px; font-weight: 800;">
        Italy Trip Task Reminder
      </h1>
      <p style="color: #333333; font-size: 16px;">
        Hello! This is a friendly reminder for the following task:
      </p>
      <div style="background-color: #FFFFFF; padding: 15px; border-radius: 8px; margin-top: 15px; border-left: 4px solid #E2725B;">
        <p style="font-size: 18px; font-weight: bold; color: #003366; margin: 0;">
          ${item.task}
        </p>
        <p style="font-size: 14px; color: #757575; margin: 5px 0 0;">
          This task was due on: ${dueDate}
        </p>
      </div>
      <p style="color: #333333; font-size: 16px; margin-top: 20px;">
        Please complete it as soon as possible.
      </p>
      <p style="color: #757575; font-size: 12px; margin-top: 30px; text-align: center;">
        Generated by the Italy Trip Planner App
      </p>
    </div>
  `;
};


const TodoItem: React.FC<{ item: TodoItemType; onToggle: (id: number) => void; onNotify: (item: TodoItemType) => void; }> = ({ item, onToggle, onNotify }) => {
    const isOverdue = !item.completed && item.dueDate && new Date() > new Date(item.dueDate);

    return (
        <li
            className={`p-4 rounded-xl transition-all duration-300 ${item.completed ? 'bg-brand-success-bg' : 'bg-brand-surface shadow-subtle hover:shadow-lifted'}`}
        >
            <div className="flex items-start">
                 <div
                    className={`flex-shrink-0 mt-0.5 mr-4 cursor-pointer`}
                    onClick={() => onToggle(item.id)}
                    aria-label={`Mark task as ${item.completed ? 'incomplete' : 'complete'}`}
                >
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center border-2 transition-colors ${item.completed ? 'bg-brand-success border-brand-success' : 'border-brand-border'}`}>
                        {item.completed && <Icon name="check" className="w-4 h-4 text-white" />}
                    </div>
                </div>

                <div className="flex-grow">
                    <p
                        className={`font-medium cursor-pointer ${item.completed ? 'line-through text-brand-text-muted' : 'text-brand-text-main'}`}
                        onClick={() => onToggle(item.id)}
                    >
                        {item.task}
                    </p>
                    {item.dueDate && (
                        <p className={`text-xs mt-1 ${isOverdue ? 'text-red-500 font-semibold' : 'text-brand-text-muted'}`}>
                           Due: {new Date(item.dueDate).toLocaleString()}
                        </p>
                    )}
                </div>

                <div className="flex -space-x-3 ml-4 flex-shrink-0">
                    {item.assignees.map(name => (
                        <div key={name} title={name} className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold border-2 border-white ${getAssigneeColor(name)}`}>
                            {name.charAt(0)}
                        </div>
                    ))}
                </div>
            </div>

            {(item.link || isOverdue) && (
                <div className="pt-3 pl-10 flex flex-wrap gap-3 items-center">
                    {item.link && (
                         <a
                            href={item.link.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className={`inline-flex items-center bg-brand-accent-light text-brand-accent font-semibold px-3 py-1.5 rounded-lg hover:bg-brand-accent hover:text-white transition-colors text-sm ${item.completed ? 'opacity-50 pointer-events-none' : ''}`}
                            aria-disabled={item.completed}
                            tabIndex={item.completed ? -1 : 0}
                        >
                            <Icon name="link" className="w-4 h-4 mr-2" />
                            {item.link.text}
                        </a>
                    )}
                    {isOverdue && (
                        <button
                            onClick={() => onNotify(item)}
                            className="inline-flex items-center bg-yellow-100 text-yellow-800 font-semibold px-3 py-1.5 rounded-lg hover:bg-yellow-200 transition-colors text-sm"
                        >
                            <Icon name="mail" className="w-4 h-4 mr-2" />
                            Notify Assignees
                        </button>
                    )}
                </div>
            )}
        </li>
    );
}

const TodoList: React.FC = () => {
    const [todos, setTodos] = useState<TodoItemType[]>(initialTodoList);
    const timeoutIdsRef = useRef<{ [key: number]: number }>({});

    // A ref to the latest todos, to avoid stale closures in setTimeout
    const todosRef = useRef(todos);
    useEffect(() => {
        todosRef.current = todos;
    }, [todos]);

    const handleToggle = (id: number) => {
        setTodos(prevTodos =>
            prevTodos.map(todo =>
                todo.id === id ? { ...todo, completed: !todo.completed } : todo
            )
        );
    };
    
    const handleNotify = (item: TodoItemType) => {
        const recipients = item.assignees
            .map(name => travelerDetails.find(t => t.name === name)?.email)
            .filter(Boolean);
        
        if (recipients.length === 0) {
            alert("No email address found for the assignees of this task.");
            return;
        }

        const subject = `Task Reminder: ${item.task}`;
        const body = createEmailBody(item);
        
        window.location.href = `mailto:${recipients.join(',')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    };

    // Effect for scheduling automatic notifications
    useEffect(() => {
        const timeoutIds = timeoutIdsRef.current;
        
        // Clear all existing timeouts before rescheduling
        Object.values(timeoutIds).forEach(clearTimeout);
        timeoutIdsRef.current = {};

        // Schedule new timeouts
        todos.forEach(todo => {
            if (!todo.completed && todo.dueDate) {
                const dueDate = new Date(todo.dueDate);
                const now = new Date();

                if (dueDate > now) {
                    const delay = dueDate.getTime() - now.getTime();
                    const timeoutId = setTimeout(() => {
                        // Use the ref to get the latest task state
                        const latestTask = todosRef.current.find(t => t.id === todo.id);
                        if (latestTask && !latestTask.completed) {
                            handleNotify(latestTask);
                        }
                    }, delay);
                    timeoutIds[todo.id] = timeoutId as any;
                }
            }
        });

        // Cleanup on unmount
        return () => {
            Object.values(timeoutIdsRef.current).forEach(clearTimeout);
        };
    }, [todos]); // Re-run whenever todos change


    const progress = useMemo(() => {
        const completedCount = todos.filter(t => t.completed).length;
        return todos.length > 0 ? (completedCount / todos.length) * 100 : 0;
    }, [todos]);

    const incompleteTodos = todos.filter(t => !t.completed).sort((a,b) => {
        const aDate = a.dueDate ? new Date(a.dueDate).getTime() : Infinity;
        const bDate = b.dueDate ? new Date(b.dueDate).getTime() : Infinity;
        return aDate - bDate;
    });
    const completedTodos = todos.filter(t => t.completed);

    return (
        <div className="max-w-3xl mx-auto">
            <h1 className="text-4xl font-extrabold text-brand-primary mb-2">Pre-Trip To-Do List</h1>
            <p className="text-brand-text-muted">Check off tasks as you complete them.</p>

            <FlightCountdown />

            <div className="mb-8">
                <div className="flex justify-between mb-1">
                    <span className="text-base font-semibold text-brand-text-main">Progress</span>
                    <span className="text-sm font-semibold text-brand-accent">{Math.round(progress)}%</span>
                </div>
                <div className="w-full bg-brand-border rounded-full h-2.5">
                    <div className="bg-brand-accent h-2.5 rounded-full transition-all duration-500" style={{ width: `${progress}%` }}></div>
                </div>
            </div>

            <div className="space-y-6">
                <div>
                    <h2 className="text-2xl font-bold text-brand-primary border-b border-brand-border pb-2 mb-4">Pending Tasks</h2>
                    {incompleteTodos.length > 0 ? (
                        <ul className="space-y-3">
                            {incompleteTodos.map(item => (
                                <TodoItem key={item.id} item={item} onToggle={handleToggle} onNotify={handleNotify} />
                            ))}
                        </ul>
                    ) : (
                        <div className="text-center py-8 px-4 bg-brand-surface rounded-xl shadow-subtle">
                          <p className="text-brand-text-muted font-semibold">All tasks completed. Well done!</p>
                        </div>
                    )}
                </div>

                {completedTodos.length > 0 && (
                    <div>
                        <h2 className="text-2xl font-bold text-brand-primary border-b border-brand-border pb-2 mb-4">Completed</h2>
                        <ul className="space-y-3">
                            {completedTodos.map(item => (
                                <TodoItem key={item.id} item={item} onToggle={handleToggle} onNotify={handleNotify} />
                            ))}
                        </ul>
                    </div>
                )}
            </div>
        </div>
    );
};

export default TodoList;